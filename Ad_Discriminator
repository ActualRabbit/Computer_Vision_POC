## Load Packages

from keras.preprocessing.image import ImageDataGenerator
from keras import layers
from keras import models
from keras import optimizers
import matplotlib.pyplot as plt
import pandas as pd

## Import Data

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   rotation_range = 40,
                                   width_shift_range = 0.2,
                                   height_shift_range = 0.2,
                                   shear_range = 0.2)

test_datagen = ImageDataGenerator(rescale = 1./255)

train_generator = train_datagen.flow_from_directory(directory = ".../Training_Set/",
                                                    target_size = (250, 300),
                                                    classes = ("Above", "Below"),
                                                    class_mode = "binary", 
                                                    batch_size = 3)

validation_generator = test_datagen.flow_from_directory(directory = ".../Validation_Set/",
                                                        target_size = (250, 300),
                                                        classes = ("Above", "Below"),
                                                        class_mode = "binary",
                                                        batch_size = 3)
                                                        
for data_batch, labels_batch in train_generator:
   print("data batch shape:", data_batch.shape)
   print("labels batch shape:", labels_batch.shape)
   break
   
## Model Architecture

model = models.Sequential()
model.add(layers.Conv2D(8, (3, 3), activation = "relu", input_shape = (250, 300, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(8, (3, 3), activation = "relu"))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(16, (3, 3), activation = "relu"))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(32, (3, 3), activation = "relu"))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Flatten())
model.add(layers.Dense(656, activation = "relu"))
model.add(layers.Dense(1, activation = "sigmoid"))

model.summary()   

## Compile Model

model.compile(loss = "binary_crossentropy",
  optimizer = optimizers.RMSprop(lr = 1e-4),
  metrics = ["acc"])
  
## Estimate model

history = model.fit_generator(
  train_generator,
  steps_per_epoch = 11,
  epochs = 5,
  validation_data = validation_generator,
  validation_steps = 5
)
